import asyncio
import logging
from datetime import datetime

from redis import Redis
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters, Application
)

from db import SessionLocal, User, UserSettings
from scheduler import is_weekend_today

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

LOGIN_INPUT = 1

redis = Redis(host="localhost", port=6379, decode_responses=True)


async def worker(app: Application):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å."""
    db = SessionLocal()
    while True:
        task = redis.blpop(["message_queue"], timeout=10 * 60)
        if task:
            chat_id, text = task[1].split(":", 1)
            chat_id = int(chat_id)
            user = db.query(User).filter_by(chat_id=chat_id).first()
            user_settings = db.query(UserSettings).filter_by(user_id=user.id).first()
            if user_settings and not is_weekend_today(user_settings.weekends, datetime.now()):
                await app.bot.send_message(chat_id=chat_id, text=text)
        await asyncio.sleep(1)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    session = SessionLocal()
    try:
        tg_user = update.effective_user
        user = session.query(User).filter_by(tg_name=tg_user.username).first()

        if user:
            if user.tg_checked and user.chat_id:
                await update.message.reply_text(
                    f"üîí –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ª–æ–≥–∏–Ω—É: {user.login}",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            context.user_data["tg_username"] = tg_user.username
            context.user_data["user_id"] = user.id

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            await update.message.reply_text(
                "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω —Å —Å–∞–π—Ç–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
                ])
            )
            return LOGIN_INPUT

        else:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
                "–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–∏–≤—ã—á–µ–∫.\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ:\n"
                "[HabitTracker.com](https://www.example.com)",
                parse_mode="Markdown",
                disable_web_page_preview=True,
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    finally:
        session.close()


async def handle_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    session = SessionLocal()
    try:
        login = update.message.text.strip()
        user = session.query(User).filter_by(login=login).first()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user:
            await update.message.reply_text(
                "‚ùå –õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return LOGIN_INPUT

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Telegram-–∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if user.tg_name.lower() != context.user_data["tg_username"].lower():
            await update.message.reply_text(
                f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Telegram-–∞–∫–∫–∞—É–Ω—Ç–æ–≤!\n"
                f"–í –±–∞–∑–µ: {user.tg_name}\n"
                f"–í–∞—à: {context.user_data['tg_username']}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
                ])
            )
            return LOGIN_INPUT

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.tg_checked = True
        user.chat_id = update.effective_chat.id
        session.commit()

        await update.message.reply_text(
            "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
            reply_markup=ReplyKeyboardRemove()
        )

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in login handler: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    finally:
        session.close()


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    query = update.callback_query
    try:
        if query:
            await query.answer()
            await query.edit_message_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=None
            )
        else:
            await update.message.reply_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
    except Exception as e:
        logger.error(f"Error in cancel handler: {e}")

    context.user_data.clear()
    return ConversationHandler.END


def setup_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_login),
                CallbackQueryHandler(cancel, pattern="^cancel$")
            ],
        },
        fallbacks=[
            CommandHandler("start", start),
            CallbackQueryHandler(cancel, pattern="^cancel$")
        ],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
